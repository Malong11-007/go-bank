// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: account.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (holder_name, balance, currency)
VALUES ($1, $2, $3)
RETURNING id, holder_name, balance, currency, created_at
`

type CreateAccountParams struct {
	HolderName string `json:"holder_name"`
	Balance    int64  `json:"balance"`
	Currency   string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.HolderName, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.HolderName,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, holder_name, balance, currency, created_at
FROM accounts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.HolderName,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, holder_name, balance, currency, created_at
FROM accounts
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.HolderName,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
SET holder_name = CASE
        WHEN $2::boolean THEN $3::varchar
        ELSE holder_name
    END,
    balance = CASE
        WHEN $4::boolean THEN $5::bigint
        ELSE balance
    END,
    currency = CASE
        WHEN $6::boolean THEN $7::varchar
        ELSE currency
    END
WHERE id = $1
RETURNING id, holder_name, balance, currency, created_at
`

type UpdateAccountParams struct {
	ID                 uuid.UUID `json:"id"`
	HolderNameDoUpdate bool      `json:"holder_name_do_update"`
	HolderName         string    `json:"holder_name"`
	BalanceDoUpdate    bool      `json:"balance_do_update"`
	Balance            int64     `json:"balance"`
	CurrencyDoUpdate   bool      `json:"currency_do_update"`
	Currency           string    `json:"currency"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount,
		arg.ID,
		arg.HolderNameDoUpdate,
		arg.HolderName,
		arg.BalanceDoUpdate,
		arg.Balance,
		arg.CurrencyDoUpdate,
		arg.Currency,
	)
	return err
}
